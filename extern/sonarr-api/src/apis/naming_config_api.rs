/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`api_v3_config_naming_examples_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV3ConfigNamingExamplesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v3_config_naming_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV3ConfigNamingGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v3_config_naming_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV3ConfigNamingIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v3_config_naming_id_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV3ConfigNamingIdPutError {
    UnknownValue(serde_json::Value),
}


pub async fn api_v3_config_naming_examples_get(configuration: &configuration::Configuration, rename_episodes: Option<bool>, replace_illegal_characters: Option<bool>, colon_replacement_format: Option<i32>, custom_colon_replacement_format: Option<&str>, multi_episode_style: Option<i32>, standard_episode_format: Option<&str>, daily_episode_format: Option<&str>, anime_episode_format: Option<&str>, series_folder_format: Option<&str>, season_folder_format: Option<&str>, specials_folder_format: Option<&str>, id: Option<i32>, resource_name: Option<&str>) -> Result<(), Error<ApiV3ConfigNamingExamplesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_rename_episodes = rename_episodes;
    let p_replace_illegal_characters = replace_illegal_characters;
    let p_colon_replacement_format = colon_replacement_format;
    let p_custom_colon_replacement_format = custom_colon_replacement_format;
    let p_multi_episode_style = multi_episode_style;
    let p_standard_episode_format = standard_episode_format;
    let p_daily_episode_format = daily_episode_format;
    let p_anime_episode_format = anime_episode_format;
    let p_series_folder_format = series_folder_format;
    let p_season_folder_format = season_folder_format;
    let p_specials_folder_format = specials_folder_format;
    let p_id = id;
    let p_resource_name = resource_name;

    let uri_str = format!("{}/api/v3/config/naming/examples", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_rename_episodes {
        req_builder = req_builder.query(&[("renameEpisodes", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_replace_illegal_characters {
        req_builder = req_builder.query(&[("replaceIllegalCharacters", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_colon_replacement_format {
        req_builder = req_builder.query(&[("colonReplacementFormat", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_custom_colon_replacement_format {
        req_builder = req_builder.query(&[("customColonReplacementFormat", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_multi_episode_style {
        req_builder = req_builder.query(&[("multiEpisodeStyle", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_standard_episode_format {
        req_builder = req_builder.query(&[("standardEpisodeFormat", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_daily_episode_format {
        req_builder = req_builder.query(&[("dailyEpisodeFormat", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_anime_episode_format {
        req_builder = req_builder.query(&[("animeEpisodeFormat", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_series_folder_format {
        req_builder = req_builder.query(&[("seriesFolderFormat", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_season_folder_format {
        req_builder = req_builder.query(&[("seasonFolderFormat", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_specials_folder_format {
        req_builder = req_builder.query(&[("specialsFolderFormat", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_id {
        req_builder = req_builder.query(&[("id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_resource_name {
        req_builder = req_builder.query(&[("resourceName", &param_value.to_string())]);
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("apikey", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-Api-Key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiV3ConfigNamingExamplesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_v3_config_naming_get(configuration: &configuration::Configuration, ) -> Result<models::NamingConfigResource, Error<ApiV3ConfigNamingGetError>> {

    let uri_str = format!("{}/api/v3/config/naming", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("apikey", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-Api-Key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::NamingConfigResource`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::NamingConfigResource`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiV3ConfigNamingGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_v3_config_naming_id_get(configuration: &configuration::Configuration, id: i32) -> Result<models::NamingConfigResource, Error<ApiV3ConfigNamingIdGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;

    let uri_str = format!("{}/api/v3/config/naming/{id}", configuration.base_path, id=p_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("apikey", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-Api-Key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::NamingConfigResource`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::NamingConfigResource`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiV3ConfigNamingIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_v3_config_naming_id_put(configuration: &configuration::Configuration, id: &str, naming_config_resource: Option<models::NamingConfigResource>) -> Result<models::NamingConfigResource, Error<ApiV3ConfigNamingIdPutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;
    let p_naming_config_resource = naming_config_resource;

    let uri_str = format!("{}/api/v3/config/naming/{id}", configuration.base_path, id=crate::apis::urlencode(p_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("apikey", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-Api-Key", value);
    };
    req_builder = req_builder.json(&p_naming_config_resource);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::NamingConfigResource`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::NamingConfigResource`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiV3ConfigNamingIdPutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

