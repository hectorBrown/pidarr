/*
 * Sonarr
 *
 * Sonarr API docs - The v3 API docs apply to both v3 and v4 versions of Sonarr. Some functionality may only be available in v4 of the Sonarr application.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HttpUri {
    #[serde(rename = "fullUri", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub full_uri: Option<Option<String>>,
    #[serde(rename = "scheme", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub scheme: Option<Option<String>>,
    #[serde(rename = "host", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub host: Option<Option<String>>,
    #[serde(rename = "port", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub port: Option<Option<i32>>,
    #[serde(rename = "path", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub path: Option<Option<String>>,
    #[serde(rename = "query", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub query: Option<Option<String>>,
    #[serde(rename = "fragment", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fragment: Option<Option<String>>,
}

impl HttpUri {
    pub fn new() -> HttpUri {
        HttpUri {
            full_uri: None,
            scheme: None,
            host: None,
            port: None,
            path: None,
            query: None,
            fragment: None,
        }
    }
}

