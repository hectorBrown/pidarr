/*
 * Tdarr API
 *
 * Tdarr API Docs
 *
 * The version of the OpenAPI document: 2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiV2ScanIndividualFilePost200Response {
    #[serde(rename = "_id", skip_serializing_if = "Option::is_none")]
    pub _id: Option<String>,
    #[serde(rename = "file", skip_serializing_if = "Option::is_none")]
    pub file: Option<String>,
    #[serde(rename = "DB", skip_serializing_if = "Option::is_none")]
    pub db: Option<String>,
    #[serde(rename = "footprintId", skip_serializing_if = "Option::is_none")]
    pub footprint_id: Option<String>,
    #[serde(rename = "container", skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    #[serde(rename = "scannerReads", skip_serializing_if = "Option::is_none")]
    pub scanner_reads: Option<Box<models::ApiV2ScanIndividualFilePost200ResponseScannerReads>>,
    #[serde(rename = "ffprobeData", skip_serializing_if = "Option::is_none")]
    pub ffprobe_data: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "meta", skip_serializing_if = "Option::is_none")]
    pub meta: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "mediaInfo", skip_serializing_if = "Option::is_none")]
    pub media_info: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl ApiV2ScanIndividualFilePost200Response {
    pub fn new() -> ApiV2ScanIndividualFilePost200Response {
        ApiV2ScanIndividualFilePost200Response {
            _id: None,
            file: None,
            db: None,
            footprint_id: None,
            container: None,
            scanner_reads: None,
            ffprobe_data: None,
            meta: None,
            media_info: None,
        }
    }
}

