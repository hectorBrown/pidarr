/*
 * Tdarr API
 *
 * Tdarr API Docs
 *
 * The version of the OpenAPI document: 2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiV2AlterWorkerLimitPostRequestData {
    #[serde(rename = "process")]
    pub process: Process,
    #[serde(rename = "workerType")]
    pub worker_type: WorkerType,
}

impl ApiV2AlterWorkerLimitPostRequestData {
    pub fn new(process: Process, worker_type: WorkerType) -> ApiV2AlterWorkerLimitPostRequestData {
        ApiV2AlterWorkerLimitPostRequestData {
            process,
            worker_type,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Process {
    #[serde(rename = "increase")]
    Increase,
    #[serde(rename = "decrease")]
    Decrease,
}

impl Default for Process {
    fn default() -> Process {
        Self::Increase
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WorkerType {
    #[serde(rename = "healthcheckcpu")]
    Healthcheckcpu,
    #[serde(rename = "healthcheckgpu")]
    Healthcheckgpu,
    #[serde(rename = "transcodecpu")]
    Transcodecpu,
    #[serde(rename = "transcodegpu")]
    Transcodegpu,
}

impl Default for WorkerType {
    fn default() -> WorkerType {
        Self::Healthcheckcpu
    }
}

