/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CollectionUpdateResource {
    #[serde(rename = "collectionIds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub collection_ids: Option<Option<Vec<i32>>>,
    #[serde(rename = "monitored", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub monitored: Option<Option<bool>>,
    #[serde(rename = "monitorMovies", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub monitor_movies: Option<Option<bool>>,
    #[serde(rename = "searchOnAdd", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub search_on_add: Option<Option<bool>>,
    #[serde(rename = "qualityProfileId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub quality_profile_id: Option<Option<i32>>,
    #[serde(rename = "rootFolderPath", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub root_folder_path: Option<Option<String>>,
    #[serde(rename = "minimumAvailability", skip_serializing_if = "Option::is_none")]
    pub minimum_availability: Option<models::MovieStatusType>,
}

impl CollectionUpdateResource {
    pub fn new() -> CollectionUpdateResource {
        CollectionUpdateResource {
            collection_ids: None,
            monitored: None,
            monitor_movies: None,
            search_on_add: None,
            quality_profile_id: None,
            root_folder_path: None,
            minimum_availability: None,
        }
    }
}

