/*
 * Radarr
 *
 * Radarr API docs
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`api_v3_importlist_movie_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV3ImportlistMovieGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v3_importlist_movie_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV3ImportlistMoviePostError {
    UnknownValue(serde_json::Value),
}


pub async fn api_v3_importlist_movie_get(configuration: &configuration::Configuration, include_recommendations: Option<bool>, include_trending: Option<bool>, include_popular: Option<bool>) -> Result<(), Error<ApiV3ImportlistMovieGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_include_recommendations = include_recommendations;
    let p_include_trending = include_trending;
    let p_include_popular = include_popular;

    let uri_str = format!("{}/api/v3/importlist/movie", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_include_recommendations {
        req_builder = req_builder.query(&[("includeRecommendations", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_trending {
        req_builder = req_builder.query(&[("includeTrending", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_popular {
        req_builder = req_builder.query(&[("includePopular", &param_value.to_string())]);
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("apikey", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-Api-Key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiV3ImportlistMovieGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn api_v3_importlist_movie_post(configuration: &configuration::Configuration, movie_resource: Option<Vec<models::MovieResource>>) -> Result<(), Error<ApiV3ImportlistMoviePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_movie_resource = movie_resource;

    let uri_str = format!("{}/api/v3/importlist/movie", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.query(&[("apikey", value)]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-Api-Key", value);
    };
    req_builder = req_builder.json(&p_movie_resource);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiV3ImportlistMoviePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

